#!/usr/bin/python

import sys
import re
import gtk
import argparse

def pick_color(c, source, short):
    sel = gtk.ColorSelectionDialog('colorsplat: %s (%s)' % (c, source))
    sel.colorsel.set_current_color(gtk.gdk.color_parse(c))

    def ok(widget, data):
        cur = sel.colorsel.get_current_color()
        if short:
            data['color'] = '#%02x%02x%02x' % \
                tuple((int(c)>>8) for c in (cur.red, cur.green, cur.blue))
        else:
            data['color'] = cur.to_string()

    def cancel(widget, x):
        data['color'] = c

    data = {}
    sel.ok_button.connect('clicked', ok, data)
    sel.ok_button.connect('clicked', gtk.main_quit)
    sel.cancel_button.connect('clicked', cancel, data)
    sel.cancel_button.connect('clicked', gtk.main_quit)

    sel.show()
    gtk.main()
    sel.hide()

    return data['color']

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-2', '--short', action='store_true', default=True)
    parser.add_argument('-4', '--long', dest='short', action='store_false')
    parser.add_argument('color', nargs='*')
    args = parser.parse_args()

    if args.color:
        for c in args.color:
            print pick_color(c, 'arg', args.short)
    else:
        colorpat = re.compile('#[0-9a-fA-F]+')
        replace = lambda m: pick_color(m.group(0), 'stdin', args.short)
        for line in sys.stdin:
            print colorpat.sub(replace, line.strip())
