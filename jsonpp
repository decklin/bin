#!/usr/bin/env ruby

require 'json'
require 'pp'

# Read from standard input.

begin
  input = JSON.parse(STDIN.read)
rescue => e
  STDERR.puts "Error parsing JSON input: #{e}"
  exit 1
end

# Turn an argument into a selector. Printing options (-p, -t, and -j)
# ignore anything to their right; looping options (-e, -k, and -v) and
# selection (any other argument) evaluate everything to their right.

def sel(arg, rest=nil)
  case arg
  when '-p'; proc {|obj| pp(obj) }
  when '-j'; proc {|obj| puts json(obj) }
  when '-t'; proc {|obj| puts text(obj) }
  when '-e'; proc {|obj| obj.each        {|e| rest.call(e) } }
  when '-k'; proc {|obj| obj.keys.each   {|k| rest.call(k) } }
  when '-v'; proc {|obj| obj.values.each {|v| rest.call(v) } }
  else       proc {|obj| r = gwim(obj, arg) ; rest.call(r)   }
  end
end

# How to print things, if not using the pp style.

def json(obj)
  JSON.create_id = nil
  JSON.pretty_generate(obj)
end

def text(obj)
  case obj
  when Array; obj.join("\t")
  when Hash ; obj.map {|pair| text(pair) }
  else        obj.to_s
  end
end

# Get-what-I-mean key selection.

def gwim(obj, key)
  case key
  when /,/    ; key.split(',').map {|k| gwim(obj, k) }
  when /\./   ; key.split('.').reduce(obj) {|o, k| gwim(o, k) }
  when /^\d+$/; obj[key.to_i]
  else          obj[key]
  end
end

# Transform the arguments into a query proc by doing a right fold. A
# final -p is implied in case no other printing option is reached.

ARGV.reverse_each.inject(sel('-p')) {|r, a| sel(a, r) }.call(input)
