#!/bin/sh

# A multiple-pane launcher for tmux. Give it an initial command,
# possibly with some args, and each line read from stdin will be added
# as the final argument to the command. As with dq, if you need to put
# that arg somewhere in the middle of your command , use sh -c:
#
#     ls | tmulp sh -c 'echo "$1"; sleep 5' -
#
# Note the very important dash arg to set $0 so that your data is $1.

min_lines=2
while getopts l:m:sv opt; do
    case $opt in
        l) layout="$OPTARG";;
        m) min_lines="$OPTARG";;
        s) sync=yes;;
        v) verbose=yes;;
        ?) echo "$0: unknown option $opt" 1>&2; exit 2;;
    esac
done; shift $(($OPTIND - 1))

if test $# -eq 0; then
    echo "$0: usage: tmulp COMMAND [INITIAL_ARG...]"
    exit 2
fi

setup_fifo() {
    fifo=$(mktemp -u)
    mkfifo "$fifo"
    cleanup() { rm -f "$fifo" && trap - INT TERM EXIT; }
    trap 'cleanup; exit' INT TERM; trap 'cleanup' EXIT
}

create_pane() {
    if test -p "$fifo"; then
        tmux split-window -t "$window" "$@" && : >"$fifo" && cleanup
    else
        tmux list-panes -t "$window" -F '#{pane_height} #{pane_id}' | sort -n | tail -1 |
            (read h p; tmux split-window -t "$p" -l "$(($h - min_lines - 1))" -d "$@")
    fi
}

setup_fifo

window=$(tmux new-window -P cat "$fifo")
test -z "$sync" || tmux set-option -t "$window" synchronize-panes on

while read -r line; do
    if create_pane "$@" "$line"; then
        test -z "$verbose" || echo "created pane for: $* $line"
    else
        echo "error! failed to create pane for: $* $line" 1>&2
    fi
done

test -z "$layout" || tmux select-layout -t "$window" "$layout"
