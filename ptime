#!/usr/bin/env ruby

require 'time'
require 'optparse'
require 'ostruct'

EPOCH_MAX = 1 << 31

def parse_args(&blk)
  OpenStruct.new.tap do |o|
    OptionParser.new.instance_exec(o, &blk).parse!
  end
end

options = parse_args do |opts|
  opts.source = :parse
  opts.output = :strftime
  opts.format = '%F %T %Z'
  on('-i', '--iso') { opts.output = :iso8601 }
  on('-f', '--format F') {|arg| opts.output = :strftime; opts.format = arg }
  on('-m', '--minutes') { opts.output = :diff; opts.unit = 60 }
  on('-h', '--hours') { opts.output = :diff; opts.unit = 3600 }
  on('-d', '--days') { opts.output = :diff; opts.unit = 86400 }
  on('-o', '--round R') {|arg| opts.round = arg }
  on('-p', '--posix') { opts.output = :strftime; opts.format = '%Y%m%d%H%M.%S' }
  on('-r', '--reference') { opts.source = :mtime }
  on('-e', '--epoch') { opts.source = :epoch }
  on('-v', '--verbose') { opts.verbose = true }
end

class Time
  def self.ncsa_clf(str)
    strptime(str, '%d/%b/%Y:%H:%M:%S %z')
  end
end

def parse_time(str)
  # If we know Chronic is required, skip the faster strategies
  unless str =~ /today|yesterday|ago|hence|before|from|this|last/
    %i[rfc2822 httpdate xmlschema ncsa_clf parse].each do |m|
      begin
        return Time.send(m, str)
      rescue ArgumentError
      end
    end
  end
  # If it's 7+ digits (>= 1 million seconds == 1970-01-12 13:46:40),
  # Chronic won't parse it as HHMMSS, and if we've gotten here, we know
  # Time.parse didn't like it either, so assume it's unambiguously an
  # epoch time even though --epoch wasn't specified.
  str =~ /^\d{7,}$/ ? parse_epoch(str) : try_chronic(str)
end

def parse_epoch(str)
  t = str.to_f
  t /= 1000 while t >= EPOCH_MAX
  Time.at(t)
end

def try_chronic(str)
  require 'chronic'
  Chronic.parse(str)
rescue LoadError => err
  STDERR.puts err
  nil
end

ARGV.each do |arg|
  t = case options.source
  when :parse
    parse_time(arg)
  when :mtime
    File.mtime(arg)
  when :epoch
    parse_epoch(arg)
  end
  if t
    out = case options.output
    when :iso8601
      t.iso8601
    when :strftime
      t.strftime(options.format)
    when :diff
      diff = ((Time.now - t) / options.unit.to_f).abs
      case options.round
      when 'down', 'floor'
        diff.floor
      when 'up', 'ceil'
        diff.ceil
      else
        diff.round(options.round.to_i)
      end
    end
    out += "\t#{arg}" if options.verbose
    puts out
  else
    STDERR.puts 'All parsing methods failed'
    puts arg
  end
end
