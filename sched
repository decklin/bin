#!/usr/bin/ruby

require 'optparse'

# Run a command n times, spread over some duration with randomly-divided
# sleeps (by default, 1 time over 1 hour).
#
# In most cases, this script will take less than the specified duration
# to complete: once the command has run for the final time, the script
# exits immediately. However, if the command itself takes a long time,
# and subsequent invocations are "behind schedule", then (1) sleeping
# will be skipped (2) the entire script execution may take longer than
# the specified total duration. So, don't make any assumptions about how
# long this script will take to run.
#
# The lengths of the gaps when the script sleeps are calculated using a
# scale factor: the longest sleep will be no more than scale times the
# shortest sleep. If you pass a scale of 1, all gaps will be equal, so
# for the default settings (1 time, 1 hour) you will get a sleep of
# exactly 30 minutes. Specifying --scale 59, on the other hand, will
# yield a sleep of somewhere between 1 and 59 minutes. The default scale
# is 9, so a single run will happen somewhere between 10% and 90% into
# the duration.
#
# The following suffixes may also be used to specify longer durations:

SUFFIXES = {'m' => 60, 'h' => 3600, 'd' => 86400}

duration = 3600
n_times = 1
scale = 9
verbose = false

def parse_duration(d_str)
  if d_str =~ /^(\d*(?:\.\d+)?)([smhd])?$/
    $1.to_f * SUFFIXES.fetch($2, 1)
  else
    STDERR.puts "couldn't understand duration: #{d_str}"
    exit 2
  end
end

OptionParser.new do |op|
  op.on('-d', '--duration SECONDS') {|a| duration = parse_duration(a) }
  op.on('-n', '--times TIMES') {|a| n_times = a.to_i }
  op.on('-s', '--scale FACTOR') {|a| scale = a.to_f }
  op.on('-v', '--verbose') {|a| verbose = true }
end.parse!

gap_scale_factors = (0..n_times).map { 1 + rand * (scale - 1) }
gap_scale_sum = gap_scale_factors.reduce(&:+)
gaps = gap_scale_factors.map {|gsf| duration * gsf / gap_scale_sum }
gaps.pop

elapsed = 0
gaps.each do |gap|
  until_next_gap = gap - elapsed
  if until_next_gap >= 0
    STDERR.puts "sched: sleeping until #{Time.now + until_next_gap}, (#{until_next_gap.round(1)}s)" if verbose
    begin
      sleep(until_next_gap)
    rescue Interrupt
      exit 1
    end
  else
    STDERR.puts "sched: warning: not sleeping (behind #{-until_next_gap.round(1)}s)"
  end
  start_time = Time.now
  system(*ARGV)
  elapsed = Time.now - start_time
end
