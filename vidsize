#!/usr/bin/python

# Decklin's mencoder bitrate/size calculator for two-pass encoding
# ----------------------------------------------------------------
#
# The examples assume you have an mencoder.conf set up with mp3lame
# in VBR mode, and profiles for mpeg4 and x264. {} denotes a choice
# between sets of arguments, and [] represents arguments that are
# entirely optional.
#
# Instructions:
#
#  1. Get length, do cropdetect, check for telecining, then estimate
#     bitrate:
#
#     vidsize -g W:H:X:Y -l SECS [-F FPS]
#
#  2. First encode pass:
#
#     mencoder SRC \
#         -vf crop=W:H:X:Y,scale=W:H \
#         [-fps 30000/1001 -ofps 24000/1001] \
#         {-profile mpeg4 -lavcopts vbitrate=RATE:vpass=1:turbo} \
#         {-profile x264 -x264encopts bitrate=RATE:pass=1:turbo=2} \
#         [-lameopts q=N] \
#         [-sid N -vobsubout NAME] \
#         -passlogfile NAME.log \
#         -o /dev/null
#
#  3. Calculate real bitrate:
#
#     vidsize -g W:H:X:Y -l SECS -f FRAMES -a AUDIO_BYTES [-v SUB_BYTES]
#
#  4. Second encode pass:
#
#     mencoder SRC \
#         -vf crop=W:H:X:Y,scale=W:H \
#         [-fps 30000/1001 -ofps 24000/1001] \
#         {-profile mpeg4 -lavcopts vbitrate=RATE:vpass=2} \
#         {-profile x264 -x264encopts bitrate=RATE:pass=2} \
#         [-lameopts q=N] \
#         -passlogfile NAME.log \
#         -o NAME.avi
#
#  5. Read below if you are interested in the implementation.
#
#  6. Document the command line options.
#
# ----------------------------------------------------------------

import sys
import math
import getopt

# our magic numbers. everything is in bits, and proper SI prefixes. just
# to be safe, leave an extra quarter of a mib of room on the disc. i do
# not understand why, but i experimentally observe that the AVI overhead
# is 3 times as much as it should be.

BYTE = 8
KB = 1000
MIB = 1024 ** 2
DISC = 699.75 * MIB * BYTE
MINUTE = 60
BLOCK = 16
AVI_OVERHEAD = 24 * BYTE * 3

# anamorphic widescreen ntsc (1.5:1 in pixels, so we will be stretching
# horizontally). if it was telecined, we'll need to override fps since
# the encoding will frob it back to 24 or whatever. this is best done by
# taking len and frames from the first pass output so that you know how
# many frames there really were after deinterlacing.

orig_w = 720
orig_h = 480
orig_a = 16.0 / 9.0
fps = 29.97

# how we're going to crop it.

w, h, x, y = [orig_w, orig_h, 0, 0]

# your average scenario: stick a normal length movie on one cdrom, with
# plenty of room for audio, but no subtitles.

bits = 1 * DISC
len = 90.0 * MINUTE
abr = 112.0 * KB
sub = 0

# what we'd like the bits/pixel to be; this is subjective. acidrip
# suggests between 0.2 and 0.25. for x264, you will want to go lower,
# probably around 0.1 to to 0.15.

bpp = 0.225
spread = 0.025

# we will output the top few sizes for consideration. if there are sizes
# that match the original crop's aspect perfectly, this is usually
# enough to get all of them.

n_sizes = 5

# normally we will get the real len, framecount, and audio track size
# from the first pass. but estimate all these later if we don't have
# them. we can even override rate in the same way, but this is not
# recommended.

frames = None
audio = None
rate = None

if __name__ == '__main__':
    opts, args = getopt.getopt(sys.argv[1:], 'A:a:G:g:F:f:B:b:d:l:m:n:r:v:')
    if args:
        print >>sys.stderr, 'unrecognized arguments'
        sys.exit(1)

    for opt, arg in opts:
        if opt == '-A':
            abr = float(arg) * KB
        if opt == '-a':
            audio = int(arg) * BYTE
        if opt == '-G':
            orig_a = float(arg)
        if opt == '-g':
            w, h, x, y = [int(d) for d in arg.split(':')]
        if opt == '-F':
            fps = float(arg)
        if opt == '-f':
            frames = int(arg)
        if opt == '-B':
            spread = float(arg)
        if opt == '-b':
            bpp = float(arg)
        if opt == '-d':
            bits = float(arg) * DISC
        if opt == '-l':
            len = float(arg)
        if opt == '-m':
            len = float(arg) * MINUTE
        if opt == '-n':
            n_sizes = int(arg)
        if opt == '-r':
            rate = float(arg) * KB
        if opt == '-v':
            sub = int(arg) * BYTE

    if frames:
        fps = frames / len
    else:
        frames = len * fps
    if audio:
        abr = audio / len
    else:
        audio = len * abr

    bits -= audio + sub + AVI_OVERHEAD * fps * len
    if not rate: rate = bits / len

    a_scale = orig_a / (float(orig_w) / orig_h)
    aspect = a_scale * float(w) / h

    # there are many possible video sizes (although they must all be evenly
    # divisible by BLOCK), so use something like the Bresenham line algorithm
    # (you may think of each multiple of blocksize as a pixel and the aspect
    # ratio as the slope of a line) to enumerate them and consider everything
    # within the acceptable range of bpp.

    def aspect_off(w, h):
        return abs(aspect - float(w) / h)
    def bpp_off(w, h):
        return abs(bpp - float(bits) / frames / (w * h))

    sizes = []
    err = 0
    h1 = 0
    for w1 in range(0, int(w) + BLOCK, BLOCK):
        try:
            if bpp_off(w1, h1) <= spread: sizes.append((w1, h1))
        except ZeroDivisionError:
            pass
        err += BLOCK / aspect
        if abs(err) >= BLOCK/2:
            h1 += BLOCK
            err -= BLOCK
    sizes.sort(lambda a, b: cmp(aspect_off(*a), aspect_off(*b)))

    print 'orig %d:%d @ %f:1 -> cropped %d:%d @ %f:3' % (orig_w, orig_h,
        orig_a, w, h, aspect)
    print '%.1f + %.1f + %.1fmiB / %.1fs -> bitrate=%d abr=%d' % \
        (float(bits) / BYTE / MIB, float(audio) / BYTE / MIB,
        float(sub) / BYTE / MIB, len, rate / KB, abr / KB)

    for w1, h1 in sizes[:n_sizes]:
        new_bpp = float(rate) / fps / (w1 * h1)
        new_a = float(w1) / h1
        if new_a > aspect:
            w0 = w
            h0 = w / new_a * a_scale
        else:
            w0 = h * new_a / a_scale
            h0 = h
        print '  crop=%d:%d:%d:%d,scale=%d:%d -> %f:1, %.4fbpp' % (w0, h0,
            x, y, w1, h1, new_a, new_bpp)
